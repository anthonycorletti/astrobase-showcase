---
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
spec:
  clusterIP: None
  ports:
    - port: 9000
      name: server
  selector:
    app: minio
---
# Client service for connecting to any minio instance.
apiVersion: v1
kind: Service
metadata:
  name: minio-client
  labels:
    app: minio
spec:
  ports:
    - port: 9000
      name: server
  selector:
    app: minio
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio
  labels:
    app: minio
spec:
  serviceName: minio
  replicas: 3
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          env:
            - name: MINIO_ACCESS_KEY
              value: "minioadmin"
            - name: MINIO_SECRET_KEY
              value: "minioadmin"
          image: minio/minio:RELEASE.2021-04-22T15-44-28Z
          args:
            - server
            - --address
            - ":9000"
            - http://minio-{0...2}.minio.default.svc.cluster.local:9000/data{1...2}
          ports:
            - containerPort: 9000
              hostPort: 9000
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          # These volume mounts are persistent. Each pod in the StatefulSet
          # gets a volume mounted based on this field.
          volumeMounts:
            - name: data1
              mountPath: /data1
            - name: data2
              mountPath: /data2
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
  # These are converted to volume claims by the controller
  # and mounted at the paths mentioned above.
  volumeClaimTemplates:
    - metadata:
        name: data1
      spec:
        storageClassName: gp2
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
    - metadata:
        name: data2
      spec:
        storageClassName: gp2
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
